  dmatrixbun <- function (X, M, U, V, k, a, log = FALSE) 
  {
    if (!is.positive.definite(sigma)) 
    stop("Matrix sigma is not positive-definite.")
    if (!is.positive.definite(psi)) 
    stop("Matrix psi is not positive-definite.")
  if (nrow(mu) != nrow(sigma)) 
    stop("Dimensions of mu and sigma are incorrect.")
  if (ncol(mu) != ncol(psi)) 
    stop("Dimensions of mu and psi are incorrect.")
    n <- nrow(X)
    r <- ncol(X)
    cKA <- (exp(k*a)*pnorm(k+a)+exp(-k*a)*pnorm(k-a))^(n*r)
    sig.eig <- try(eigen(U, symmetric = TRUE),silent = TRUE)
    psi.eig <- try(eigen(V, symmetric = TRUE),silent = TRUE)
    ss <- X - M - a*crossprod(t(sig.eig$vec)*sqrt(sqrt(sig.eig$val))) %*% matrix(1, nrow=n, ncol=r) %*% crossprod(t(psi.eig$vec)*sqrt(sqrt(psi.eig$val)))
    dens <- -log(cKA) - 0.5*n*r*k^2 + tr(matrix(k, nrow = n, ncol = r)%*%abs(crossprod(t(psi.eig$vec)/sqrt(sqrt(psi.eig$val))) %*% t(X - M) %*% crossprod(t(sig.eig$vec)/sqrt(sqrt(sig.eig$val)))))-0.5 * tr(crossprod(t(psi.eig$vec)/(sqrt(psi.eig$val))) %*% t(ss) %*% crossprod(t(sig.eig$vec)/(sqrt(sig.eig$val))) %*% 
                                                                                                                                                                                                               ss) - log(2 * pi) * (n * r/2) - logdet(V) * (n/2) - 
      logdet(U) * (r/2)
    if (log == FALSE) 
      dens <- exp(dens)
    return(dens)
  }
  ####################
  rmatrixbun <- function (n, mu, sigma, psi, k, a) 
{
  if (missing(mu)) 
    stop("Matrix mu is missing.")
  if (!is.matrix(mu)) 
    mu <- matrix(mu)
  if (missing(sigma)) 
    stop("Matrix sigma is missing.")
  if (!is.matrix(sigma)) 
    sigma <- matrix(sigma)
  if (!is.positive.definite(sigma)) 
    stop("Matrix sigma is not positive-definite.")
  if (missing(psi)) 
    stop("Matrix psi is missing.")
  if (!is.matrix(psi)) 
    psi <- matrix(psi)
  if (!is.positive.definite(psi)) 
    stop("Matrix psi is not positive-definite.")
  if (nrow(mu) != nrow(sigma)) 
    stop("Dimensions of mu and sigma are incorrect.")
  if (ncol(mu) != ncol(psi)) 
    stop("Dimensions of mu and psi are incorrect.")
  r <- ncol(sigma)
  m <- nrow(psi)
  sigma05 <- eigen(sigma)$vectors%*%diag(sqrt(eigen(sigma)$values))%*%t(eigen(sigma)$vectors)
  psi05   <- eigen(psi)$vectors%*%diag(sqrt(eigen(psi)$values))%*%t(eigen(psi)$vectors)
  X <- list(0, nrow = r, ncol= m)
  for (l in 1:n) {
    Z <- matrix(rbun(r*m, 0, 1, k, a), nrow = r, ncol = m)
    X[[l]] <- mu + sigma05 %*% Z %*% psi05
  }
  return(X)
}
##############
library(matrixNormal)
library(mvtnorm)
library(expm)
library(cubature)
library(mcompanion)
#######################
y <- list()
x <- list()
y[[1]] <- cbind((120-c(46, 44, 58, 118, 108))*100/120, (96-c(37, 31, 33, 35, 41))*100/96)
y[[2]] <- cbind((95-c(65, 75, 85, 96, 95))*100/95, (90-c(47, 48, 55, 68, 89))*100/90)
y[[3]] <- cbind((99-c(59,73,82,109,109))*100/99,(99-c(49, 55, 64, 74, 97))*100/99)
y[[4]] <- cbind((105-c(50, 58, 84, 107, 107))*100/105, (95-c(37, 33, 43, 63, 92))*100/95)
y[[5]] <- cbind((97-c(67, 89, 104, 118, 118))*100/97, (107-c(62, 62, 85, 110, 117))*100/107)
y[[6]] <- cbind((97-c(46, 50, 59, 78, 91))*100/97, (81-c(40, 45, 43, 49, 55))*100/81)
y[[7]] <- cbind((102-c(63, 67, 74, 83, 98))*100/102, (95-c(49, 56, 63, 68, 88))*100/95)
y[[8]] <- cbind((104-c(69, 81, 98, 104, 105))*100/104, (105-c(53, 57, 69, 106, 103))*100/105)
y[[9]] <- cbind((101-c(65, 69, 72, 93, 95))*100/101, (97-c(50, 53, 59, 82, 96))*100/97)
for (i in 1:9) {
  x[[i]] <- cbind(c(.75, 0), c(0, 1.5))
}
y[[10]] <- cbind((98-c(53, 62, 71, 81, 101))*100/98, (97-c(54, 57, 66, 80, 89))*100/97)
y[[11]] <- cbind((103-c(62, 65, 96, 101, 105))*100/103, (105-c(66, 83, 95, 100, 97))*100/105)
y[[12]] <- cbind((102-c(54, 60, 57, 64, 69))*100/102, (105-c(49, 54, 56, 70, 90))*100/105)
y[[13]] <- cbind((108-c(83, 67, 80, 106, 108))*100/108, (106-c(79, 92, 95, 99, 100))*100/106)
y[[14]] <- cbind((92-c(56, 60, 61, 73, 79))*100/92, (92-c(46, 51, 57, 73, 91))*100/92)
y[[15]] <- cbind((102-c(61, 59, 71, 91, 101))*100/102, (91-c(61, 64, 71, 80, 90))*100/91)
y[[16]] <- cbind((94-c(51, 53, 55, 86, 83))*100/94, (101-c(51, 63, 91, 95, 96))*100/101)
y[[17]] <- cbind((95-c(55, 58, 59, 71, 85))*100/95, (87-c(53, 55, 57, 78, 89))*100/87)
y[[18]] <- cbind((103-c(47, 59, 64, 92, 100))*100/103, (94-c(57, 70, 81, 94, 96))*100/94)
for (i in 10:18) {
  x[[i]] <- cbind(c(1.5, 0), c(0, .75))
}
y[[19]] <- cbind((96-c(63, 81, 97, 101, 97))*100/96, (98-c(48, 55, 71, 91, 96))*100/98)
y[[20]] <- cbind((99-c(48, 70, 94, 108, 104))*100/99, (98-c(41, 43, 61, 89, 101))*100/98)
y[[21]] <- cbind((102-c(61, 78, 81, 99, 104))*100/102, (103-c(60, 56, 61, 76, 97))*100/103)
y[[22]] <- cbind((112-c(67, 76, 100, 112, 112))*100/112, (99-c(36, 43, 57, 89, 102))*100/99)
y[[23]] <- cbind((92-c(49, 59, 83, 104, 103 ))*100/92, (97-c(44, 51, 58, 85, 105))*100/97)
y[[24]] <- cbind((101-c(53, 63, 86, 104, 102))*100/101, (95-c(41, 45, 49, 59, 78))*100/95)
y[[25]] <- cbind((105-c(63, 77, 94, 111, 107))*100/105, (109-c(65, 62, 72, 93, 104))*100/109)
y[[26]] <- cbind((99-c(61, 74, 76, 89, 92))*100/99, (91-c(57, 60, 61, 67, 83))*100/91)
y[[27]] <- cbind((99-c(51, 63, 77, 99, 103))*100/99, (99-c(43, 48, 52, 61, 86))*100/99)
for (i in 19:27) {
  x[[i]] <- cbind(c(0, .75), c(1.5, 0))
}
y[[28]] <- cbind((96-c(54,61,63,93,103))*100/96, (102-c(51,56,81,97,103))*100/102)
y[[29]] <- cbind((98-c(57,63,75,99,104))*100/98, (96-c(57,55,72,85,89))*100/96)
y[[30]] <- cbind((104-c(77,88,91,113,110))*100/104, (111-c(84,83,91,102,101))*100/111)
y[[31]] <- cbind((109-c(63,60,67,85,109))*100/109, (105-c(57,67,83,100,103))*100/105)
y[[32]] <- cbind((98-c(59,65,72,95,103))*100/98, (105-c(57,61,70,90,98))*100/105)
y[[33]] <- cbind((104-c(59,62,74,89,97))*100/104, (98-c(55,67,88,95,94))*100/98)
y[[34]] <- cbind((97-c(63,70,72,101,102))*100/97, (98-c(69, 72,89,98,98))*100/98)
y[[35]] <- cbind((101-c(54,64,77,97,100))*100/101, (90-c(53,61,78,95,94))*100/90)
y[[36]] <- cbind((107-c(59,67,61,69,99))*100/107, (100-c(60,63,67,77,104))*100/100)
for (i in 28:36) {
  x[[i]] <- cbind(c(0, 1.5), c(.75, 0))
}
##########
##########
par0 <- c(-0.5056038,-7.4244258,-1.9228583,-4.3516979,-3.5545613,6.6035252,-1.2788031,-1.2796923
          ,0.6058746,-2.7841044,-6.8076897,-8.8150492,-3.3113368,2.3703395,-1.9715323,-5.2327315
          ,-3.7480014,-2.3094479,-4.2943441,3.4561335,-1.7870680,-2.1175397,-1.8479553,8.0400309
          ,5.6816778,3.7787759,0.7072958,2.2464398,7.9173065,4.8133864,1.2445504,1.6636531
          ,6.1726685,3.1107912,1.0709850,5.3565647,1.8174315,7.0282665,12.5041609,5.1005488
          ,14.1036086, .4, .4)
############################# BUN (Matrix regression)
LL <- function(par) {
  n <- 36
  mu <- matrix(par[1:10], nrow = 5, ncol = 2)
  Beta1 <- matrix(par[11:20], nrow = 5, ncol = 2)
  Beta2 <- rbind(c(par[21], 0), c(par[22:23]))
  sigma <- rbind(c(par[24:28]), c(par[25], par[29:32]), c(par[26],par[30], par[33:35]),c(par[27],par[31],par[34], par[36:37]), c(par[28],par[32],par[35], par[37:38]))
  psi   <- rbind(c(par[39:40]), c(par[40:41]))
  k     <- par[42]
  a     <- par[43]
  R <- rep(0, n)
  for (l in 1:n) {
    R[l] <-  dmatrixbun(y[[l]], mu + Beta1 %*% x[[l]] %*% Beta2, sigma, psi, k, a, log = TRUE)
  }
  #
  -sum(R)
}

fit <- optim(fn = LL, par = par0, 
             method = "Nelder-Mead", hessian=FALSE)
fit$par
fit$value

fit1 <- nlminb(par0, LL) 
fit1$par
fit1$objective

fit <- optim(fn = LL, par = fit1$par, 
             method = "CG", hessian=TRUE)
fit$par
fit$value
fit$hessian

############################# Normal (Matrix regression)
LL <- function(par) {
  n <- 36
  mu <- matrix(par[1:10], nrow = 5, ncol = 2)
  Beta1 <- matrix(par[11:20], nrow = 5, ncol = 2)
  sigma <- rbind(c(par[21:25]), c(par[22], par[26:29]), c(par[23],par[27], par[30:32]),c(par[24],par[28],par[31], par[33:34]), c(par[25],par[29],par[32], par[34:35]))
  psi   <- rbind(c(par[36:37]), c(par[37:38]))
  k     <- 0
  a     <- 0
  R <- rep(0, n)
  for (l in 1:n) {
    R[l] <-  dmatrixbun(y[[l]], mu + Beta1 %*% x[[l]] , sigma, psi, k, a, log = TRUE)
  }
  #
  -sum(R)
}
par0 <- c(-0.5056038,-7.4244258,-1.9228583,-4.3516979,-3.5545613,6.6035252,-1.2788031,-1.2796923
          ,0.6058746,-2.7841044,-6.8076897,-8.8150492,-3.3113368,2.3703395,-1.9715323,-5.2327315
          ,-3.7480014,-2.3094479,-4.2943441,3.4561335,8.0400309
          ,5.6816778,3.7787759,0.7072958,2.2464398,7.9173065,4.8133864,1.2445504,1.6636531
          ,6.1726685,3.1107912,1.0709850,5.3565647,1.8174315,7.0282665,12.5041609,5.1005488
          ,14.1036086)
fit <- optim(fn = LL, par = par0, 
             method = "Nelder-Mead", hessian=FALSE)
fit$par
fit$value

fit1 <- nlminb(fit$par, LL) 
fit1$par
fit1$objective

fit <- optim(fn = LL, par = fit1$par, 
             method = "CG", hessian=TRUE)
fit$par
fit$value
fit$hessian

############################# BUN (envelope regression)
LL <- function(par) {
  n <- 36
  mu    <- matrix(par[1:10], nrow = 5, ncol = 2)
  gamma <- matrix(par[11:15], nrow = 5, ncol = 1)
  gamma0<- matrix(null_complement(gamma), nrow = 5, ncol = 4)
  eta   <- matrix(par[16:17], nrow = 1, ncol = 2)
  omega <- par[18]
  omega0<- rbind(c(par[19:22]), c(par[20], par[23:25]), c(par[21],par[24], par[26:27]),c(par[22],par[25],par[27], par[28]))
  sigma <- gamma%*%omega%*%t(gamma) + gamma0 %*% omega0 %*% t(gamma0)
  psi   <- rbind(c(par[29:30]), c(par[30:31]))
  k     <- par[32]
  a     <- par[33]
  R <- rep(0, n)
  for (l in 1:n) {
    R[l] <-  dmatrixbun(y[[l]], mu + gamma %*% eta %*% x[[l]], sigma, psi, k, a, log = TRUE)
  }
  #
  -sum(R)
}
par0 <- c(2.6111453,-3.2305211,-4.3154712,-4.4646816,-1.3129686,-1.7063268,-0.5221879
          ,-10.7441983,-1.9364581,-5.1257149,3.2245841,3.0288646,2.7905206,1.2095977
          ,0.4244837,-5.8734663,5.1059022,6.5109458,2.5526646,-0.0314897,-0.3962061
          ,-1.4160378,5.0679654,0.7645507,0.2570627,4.2888889,1.6700185,5.1364604
          ,8.5377100,1.0675004,7.9489962,0.3882027,0.6834301) #AIC 1262
fit <- optim(fn = LL, par = par0, 
             method = "Nelder-Mead", hessian=FALSE)
fit$value
fit$par

fit1 <- nlminb(fit$par, LL) 
fit1$par
fit1$objective

fit <- optim(fn = LL, par = fit1$par, 
             method = "Nelder-Mead", hessian=TRUE)
fit$value
fit$par
fit$hessian
vec(matrix(fit$par[11:15], ncol = 1) %*% fit$par[16:17])
vec(matrix(fit1$par[11:15], ncol = 1) %*% fit1$par[16:17])
############################# Normal (envelope regression)
LL <- function(par) {
  n <- 36
  mu    <- matrix(par[1:10], nrow = 5, ncol = 2)
  gamma <- matrix(par[11:15], nrow = 5, ncol = 1)
  gamma0<- matrix(null_complement(gamma), nrow = 5, ncol = 4)
  eta   <- matrix(par[16:17], nrow = 1, ncol = 2)
  omega <- par[18]
  omega0<- rbind(c(par[19:22]), c(par[20], par[23:25]), c(par[21],par[24], par[26:27]),c(par[22],par[25],par[27], par[28]))
  sigma <- gamma%*%omega%*%t(gamma) + gamma0 %*% omega0 %*% t(gamma0)
  psi   <- rbind(c(par[29:30]), c(par[30:31]))
  k     <- 0
  a     <- 0
  R <- rep(0, n)
  for (l in 1:n) {
    R[l] <-  dmatrixbun(y[[l]], mu + gamma %*% eta %*% x[[l]], sigma, psi, k=0, a=0, log = TRUE)
  }
  #
  -sum(R)
}

par0 <- c(-2.1683146,-4.5160689,-11.7060984,-14.1530284,-7.7962633,-1.7790007,-0.5610974
          ,-6.2884879,-2.6735374,-2.1159068,3.7733520,3.3559277,3.0220660,1.5940023
          ,0.7006541,9.7484283,9.0069469,2.5122268,1.8245419,0.4897819,-0.6319114
          ,-0.2392036,4.8922991,3.8206569,1.3514084,8.9444554,5.1326763,6.7831944
          ,10.3487866,0.2843983,10.1563044)

fit1 <- nlminb(par0, LL) 
fit1$par
fit1$objective

fit <- optim(fn = LL, par = fit1$par, 
             method = "CG", hessian=TRUE)
fit$par
fit$value
fit$hessian
vec(matrix(fit$par[11:15], ncol = 1) %*% fit$par[16:17])
vec(matrix(fit1$par[11:15], ncol = 1) %*% fit1$par[16:17])

